// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

// Pari verifier for input size 128
contract Pari {
    /// The proof is invalid.
    /// @dev This can mean that provided Groth16 proof points are not on their
    /// curves, that pairing equation fails, or that the proof is not for the
    /// provided public input.
    error ProofInvalid();

    // Addresses of precompiles
    uint256 constant PRECOMPILE_MODEXP = 0x05;
    uint256 constant PRECOMPILE_ADD = 0x06;
    uint256 constant PRECOMPILE_MUL = 0x07;
    uint256 constant PRECOMPILE_VERIFY = 0x08;

    // Base field Fp order P and scalar field Fr order R.
    // For BN254 these are computed as follows:
    //     t = 4965661367192848881
    //     P = 36⋅t⁴ + 36⋅t³ + 24⋅t² + 6⋅t + 1
    //     R = 36⋅t⁴ + 36⋅t³ + 18⋅t² + 6⋅t + 1
    uint256 constant P = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
    uint256 constant R = 21888242871839275222246405745257275088548364400416034343698204186575808495617;

    // Exponents for inversions and square roots mod P
    uint256 constant EXP_INVERSE_FR = 21888242871839275222246405745257275088548364400416034343698204186575808495615; // R - 2

    //////////////////////////////// constants for processing the input //////////////////////////////

    // FFT Coset information
    uint256 constant COSET_SIZE = 8192;
    uint256 constant COSET_OFFSET = 1;

    // Preprocessed intermediate values for computing the lagrande polynomials
    // This computation is done according to https://o1-labs.github.io/proof-systems/plonk/lagrange.html
    uint256 constant MINUS_COSET_OFFSET_TO_COSET_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495616;
    uint256 constant COSET_OFFSET_TO_COSET_SIZE_INVERSE = 19101422304875435086469468687994669713919129528983155433516380493413120429210;

        uint256 constant NEG_H_Gi_0 = 4548694232661381224329603345085451343443468486629646353717595548040051361192;
    uint256 constant NEG_H_Gi_1 = 779047456013750845248907025665532036741807512849020510259999627678137577226;
    uint256 constant NEG_H_Gi_2 = 7851286347820591431928868844200575646177169547343751407975464385124742384022;
    uint256 constant NEG_H_Gi_3 = 11276349871877469122136354446989518651170201422844361150869341626146253128068;
    uint256 constant NEG_H_Gi_4 = 19962950434962175483386640909060465733663881160770062475914021357504450096572;
    uint256 constant NEG_H_Gi_5 = 20564127789796750533387345701900176432077755712588094047044847782694270032138;
    uint256 constant NEG_H_Gi_6 = 10088416007159316818077542524355642352384198076195865666674601869139290971045;
    uint256 constant NEG_H_Gi_7 = 7152237826929982153905215010278343811291825901699656979675738369605856967189;
    uint256 constant NEG_H_Gi_8 = 5019156173450399574817176804635337760080658177150022838511276108989627559995;
    uint256 constant NEG_H_Gi_9 = 3560205443829960255169586201216200722619981588925820945254513659444586129041;
    uint256 constant NEG_H_Gi_10 = 19529993546690291961868201338350927077076590308824288456822708869456942145022;
    uint256 constant NEG_H_Gi_11 = 20213857584597588494788152296800066748558611867439443043824954354567841151627;
    uint256 constant NEG_H_Gi_12 = 20141136522410386866063069585746409096076109704259963620308946368085511348318;
    uint256 constant NEG_H_Gi_13 = 16130953438060910812521047122779366310428042544524142803939857468417771478623;
    uint256 constant NEG_H_Gi_14 = 5184328548246412627060004095551250466087121278997490207674747176653041204315;
    uint256 constant NEG_H_Gi_15 = 11840645606769567553915544891211035338712603138846013857237161801780498019323;
    uint256 constant NEG_H_Gi_16 = 734849385028524342354366683358361644408017839231103789785900136936585493924;
    uint256 constant NEG_H_Gi_17 = 15489456279593640461177223182029979929413133465970459717328588612740845924054;
    uint256 constant NEG_H_Gi_18 = 20719310355140967695283651279979757126640364525053428004740527851525133870751;
    uint256 constant NEG_H_Gi_19 = 15576261403775038072519648857989872841115490924759836828749898356715900243763;
    uint256 constant NEG_H_Gi_20 = 6479953168160454226051791065331696712081150752063351641987620206962076412063;
    uint256 constant NEG_H_Gi_21 = 20051519191678316232637745370135506139454389729044324389010436785379994141409;
    uint256 constant NEG_H_Gi_22 = 8303965004452940049589461906491964773243003692611709724094725878527977893167;
    uint256 constant NEG_H_Gi_23 = 15619833792338162119217742990734732029200436495972163220723925107357163886279;
    uint256 constant NEG_H_Gi_24 = 3811233521231607164729008462281842104310349732679135492715538194784837071422;
    uint256 constant NEG_H_Gi_25 = 1653744620921754436498957604257211624809227581260899956909242049154829310045;
    uint256 constant NEG_H_Gi_26 = 3717950141942542566935737204887531610382942683430249175181781911717068707092;
    uint256 constant NEG_H_Gi_27 = 4791574160223074353423290244413211432313537889114410452080758716054794071460;
    uint256 constant NEG_H_Gi_28 = 12476966238680499465360507934818131054755248758571109448614891740850754629662;
    uint256 constant NEG_H_Gi_29 = 3260052412331461246007596848896640006652979526240466418180057129389588298451;
    uint256 constant NEG_H_Gi_30 = 4195785618234787233235667676351861266826371858149046861060063391920016315374;
    uint256 constant NEG_H_Gi_31 = 8316892810180933173855740148558106925654415113524952621380733001465085516640;
    uint256 constant NEG_H_Gi_32 = 15677347819596288498004616519029548957278876273728287639605016620663506154004;
    uint256 constant NEG_H_Gi_33 = 20547972179936463456593993471915673819135696679945427988327315401340048636904;
    uint256 constant NEG_H_Gi_34 = 16700576992901095586283163125777764393834137203514719135362017895344112986224;
    uint256 constant NEG_H_Gi_35 = 16800148100625615529972099785857914010136971659446539153063781031613339079767;
    uint256 constant NEG_H_Gi_36 = 17225999295342188891602091255116846552719564242312564343259362977438801037162;
    uint256 constant NEG_H_Gi_37 = 21012182465682797635705238083341976496279483988739055078071868106900563045355;
    uint256 constant NEG_H_Gi_38 = 2676405722373689227539972326703229171101083818042792419442385077126219416693;
    uint256 constant NEG_H_Gi_39 = 18867581211074973468088520352254358724846735340574834857538645775222625916329;
    uint256 constant NEG_H_Gi_40 = 13787406490649461584820298312388454910443743320944019526407186792165974862671;
    uint256 constant NEG_H_Gi_41 = 753806301488273033226349224151708875290570589233378423944999201643435958111;
    uint256 constant NEG_H_Gi_42 = 12579028587469400294153110790235900669111831113890969815872526397910992214402;
    uint256 constant NEG_H_Gi_43 = 1363306462736816503073304515670212880038229981674534023049094625872280980279;
    uint256 constant NEG_H_Gi_44 = 17142910302845369183411114869820615800988675447386720046852299195720462173269;
    uint256 constant NEG_H_Gi_45 = 10092021622145042147336606805920210750904106332959048385759201714451485555079;
    uint256 constant NEG_H_Gi_46 = 18341547689305074925999181003219492642453750075466070333805892451537996033630;
    uint256 constant NEG_H_Gi_47 = 363637248631443107527742047369154265011850847055629625571916495968851551566;
    uint256 constant NEG_H_Gi_48 = 21658547152395737047837290223070550032603390788890135618066740271718621032481;
    uint256 constant NEG_H_Gi_49 = 14596605639311136129254658521947193088636410996723170196733171649167966682114;
    uint256 constant NEG_H_Gi_50 = 12398520402508511425258404150951748915318752316214414423882056479015045071228;
    uint256 constant NEG_H_Gi_51 = 13758340282135053667320865089733349395459366332816721518613311903164089744230;
    uint256 constant NEG_H_Gi_52 = 9773006966768309590701119943421155074419112860702147592322999432692013623666;
    uint256 constant NEG_H_Gi_53 = 8548724771421852620588405988720961920106434638266131625016959944770571711453;
    uint256 constant NEG_H_Gi_54 = 17655443449564653930074838151161175306879730452737798537536735788503268716460;
    uint256 constant NEG_H_Gi_55 = 8064455558303738377655520767839333904701693528002526684282791029105503489412;
    uint256 constant NEG_H_Gi_56 = 20826693393483375467791156251408393954100701558503064772465605910406159095744;
    uint256 constant NEG_H_Gi_57 = 18994229388051972948549705237998910448493738022948335918486015059421097956532;
    uint256 constant NEG_H_Gi_58 = 982561767584967736312923902692221308123407100948608925416385375825507466520;
    uint256 constant NEG_H_Gi_59 = 7074484770391517768962578108352618102553719786613479486062818750630966431873;
    uint256 constant NEG_H_Gi_60 = 14482180550284381238136913456725225029337873360252220022273511248923673468200;
    uint256 constant NEG_H_Gi_61 = 2509798056361309397715204088028242970815004485394117464831237324702459201708;
    uint256 constant NEG_H_Gi_62 = 9334317215826662970252963510121930026287522464390689552801949493134216035222;
    uint256 constant NEG_H_Gi_63 = 13414132070296291958103734916998704909010502783672519738794358208116041448494;
    uint256 constant NEG_H_Gi_64 = 13638082362371098852787904161453707381804641766658316603700800944479944085510;
    uint256 constant NEG_H_Gi_65 = 6098497421584124847598528769833148097241856250059397973962422400618307909412;
    uint256 constant NEG_H_Gi_66 = 3024802400696164315392503669051591698106473051312283556785855987502381285494;
    uint256 constant NEG_H_Gi_67 = 10685529837057339195284478417809549783849082573663680590416001084635768485990;
    uint256 constant NEG_H_Gi_68 = 17027624370668518691424363997380170517755495288526196246598514991987882461039;
    uint256 constant NEG_H_Gi_69 = 21527253349907708766484517965302068582285793812836791949931942794840111098169;
    uint256 constant NEG_H_Gi_70 = 11299102100464673181580155946852498220183737219389455608580917110367274089236;
    uint256 constant NEG_H_Gi_71 = 3830280511528662069093527190640065409664271176223746123324432230737447068494;
    uint256 constant NEG_H_Gi_72 = 20139993180305692447971110448238701916624963157675703740974842335248789850210;
    uint256 constant NEG_H_Gi_73 = 18889763189517480377959855329586615832326129101230208358977439228475825394404;
    uint256 constant NEG_H_Gi_74 = 7231572279521960760977873129427364077425822186664225510533223906422169249901;
    uint256 constant NEG_H_Gi_75 = 12315708211565737910848309140203922268867561471778940544723129308130975616231;
    uint256 constant NEG_H_Gi_76 = 21447207776802873177601426833260624365789680896333052161012099935510989049776;
    uint256 constant NEG_H_Gi_77 = 8812050402193329445226874152125173125877963248181949593425449631470988747464;
    uint256 constant NEG_H_Gi_78 = 18545444822162673491723781799726694524116218982113019584028483463114673464359;
    uint256 constant NEG_H_Gi_79 = 8204690775991096474076445845615641009307893107757530688514856399324973463131;
    uint256 constant NEG_H_Gi_80 = 13138978032516771188502207797256376340198775499398832513770146611583720857958;
    uint256 constant NEG_H_Gi_81 = 13382300200937709263264889418572087716653384077857083248530325104551033044238;
    uint256 constant NEG_H_Gi_82 = 1956020350496913609195811424701905588184325651143915747218488669440334215306;
    uint256 constant NEG_H_Gi_83 = 19910891848387438079762558661417226130032338467234537039188930249044782906709;
    uint256 constant NEG_H_Gi_84 = 3832542086986795438598285960567646114126639575623908990446766174793685033021;
    uint256 constant NEG_H_Gi_85 = 3342096505297768628995792703026566637082793318554926564534653083667833124187;
    uint256 constant NEG_H_Gi_86 = 11084358854650459186074818691921084119329873039473268219190602644435656006391;
    uint256 constant NEG_H_Gi_87 = 18970753508794595986617771128584283501013352872569079757736999804175970859687;
    uint256 constant NEG_H_Gi_88 = 5908053156854169885735403358149186802650070327965717560184644274692954802460;
    uint256 constant NEG_H_Gi_89 = 3072080191351247739242916231115913538780241013933705634685666133434187746696;
    uint256 constant NEG_H_Gi_90 = 6369551893199834763752122656807452956187831354542425125679293771128374748759;
    uint256 constant NEG_H_Gi_91 = 1471145097165007006452408991253332338593610178140187238892110680437643891290;
    uint256 constant NEG_H_Gi_92 = 3168588328926953944822752430752125493509825835761285802384080014713806073071;
    uint256 constant NEG_H_Gi_93 = 16603612376529021124672871682768542883979520573559375538566738898184215555478;
    uint256 constant NEG_H_Gi_94 = 12546349299360935031260959925693449326879843760416344717749487289791279840880;
    uint256 constant NEG_H_Gi_95 = 15956425122976762731185992986198162337047844823838229723860965728635452109229;
    uint256 constant NEG_H_Gi_96 = 16746527872359117632255468542408204528606961195895564663399590104279874162333;
    uint256 constant NEG_H_Gi_97 = 17730560371040587551161459998110792102468549719174718692649828651551606358365;
    uint256 constant NEG_H_Gi_98 = 12151947565056946931130262538721133803495502943316325167618212058223499489172;
    uint256 constant NEG_H_Gi_99 = 17159162789389959066701204880170935774706062913292154061179703827413776538103;
    uint256 constant NEG_H_Gi_100 = 14003332713737353857097861160860936791020411658742093622952013040601602595274;
    uint256 constant NEG_H_Gi_101 = 9460776628555656328871126122285132954654329003796931231058202444546962334283;
    uint256 constant NEG_H_Gi_102 = 15386611065501646940083390120632755236075487720255834817564852895253984050437;
    uint256 constant NEG_H_Gi_103 = 3173367888207160897980323487352009334406980937102604760307830474541030282467;
    uint256 constant NEG_H_Gi_104 = 19324733035037808142450966126573948334303384515619291767411613865769270759130;
    uint256 constant NEG_H_Gi_105 = 5058232119740192435286264440842529913781648003544529016081874779481378712858;
    uint256 constant NEG_H_Gi_106 = 15403005970913995449121561477647936275096906453374958600690072288141228604543;
    uint256 constant NEG_H_Gi_107 = 3636745792499254386419389218155996269067344241701210055105473066195613350609;
    uint256 constant NEG_H_Gi_108 = 1879893501815273727732241496374767546787763592823125301193053916613335884368;
    uint256 constant NEG_H_Gi_109 = 17047801796637958979489121353353471301809889704187764387484507660593641448704;
    uint256 constant NEG_H_Gi_110 = 18506383671202007101116774802590350197811988575766033325522400188811242363180;
    uint256 constant NEG_H_Gi_111 = 11464713157099049534129016996288898312627333535879264821621335326266699787076;
    uint256 constant NEG_H_Gi_112 = 20309836580677666501310064138415129618404743720138583507397340051897164847838;
    uint256 constant NEG_H_Gi_113 = 20854672191369759487378564360051809217932225967278766662188259619918236291459;
    uint256 constant NEG_H_Gi_114 = 4019221724180239598401774286697333110031243705649029058670698595603109079381;
    uint256 constant NEG_H_Gi_115 = 9188292259130308324222485206765255664225603324961224124774188478908024148206;
    uint256 constant NEG_H_Gi_116 = 17685083132448243271033589705530456482262669181575398696889603465323843388228;
    uint256 constant NEG_H_Gi_117 = 13138832378065316043689016255056596899006575110473006226741886581981207693030;
    uint256 constant NEG_H_Gi_118 = 7145685834154348607220660171452865147815456745361338977248081770864737027869;
    uint256 constant NEG_H_Gi_119 = 19885478860335573310920626707503893019367715046882470380359619133497180957475;
    uint256 constant NEG_H_Gi_120 = 2842417313634460353359781236316232877486000330258472519464027209621744066809;
    uint256 constant NEG_H_Gi_121 = 18671552666992231420913025641966945963879840543505444581300626339946394033708;
    uint256 constant NEG_H_Gi_122 = 16160905586844320035926605454968260221216756501721916924174747274903261081116;
    uint256 constant NEG_H_Gi_123 = 18710398348761405687215122030820238680737777446745991064782752426278651330840;
    uint256 constant NEG_H_Gi_124 = 19395169954166921372697429781793272516027000460128659237051063112358929163274;
    uint256 constant NEG_H_Gi_125 = 7931980179802765623756186681231237865229239778179430184358921922870918875793;
    uint256 constant NEG_H_Gi_126 = 6966286901676197425654411391669596431955071934937039542847620966798123683620;
    uint256 constant NEG_H_Gi_127 = 7394695545648246687456486982859204669174178946017117144873569684602168141668;

        uint256 constant NOM_0 = 19014550952887926110623871455125061416497391259308460867063933487586230883818;
    uint256 constant NOM_1 = 21710371775985376362386139312226714255177600575818700463373582793382126768426;
    uint256 constant NOM_2 = 2103453760633219920523419252955499784730599883810245947682596045379688942796;
    uint256 constant NOM_3 = 12986802584425031738620225250141315364280222129427180108583434708988425362180;
    uint256 constant NOM_4 = 3624689084612603860835931370287225909076751858914996713341415082763869929470;
    uint256 constant NOM_5 = 17549597788368461786632506411408335645585432560149676847065984810130625229271;
    uint256 constant NOM_6 = 76587933700118059665039175799797280724741147386266641541250641196800764863;
    uint256 constant NOM_7 = 18182477590871931531503590571115502670476703403032148558816366202897638114811;
    uint256 constant NOM_8 = 13966160427080108588823725381207933297501393315367328805654321470977285130145;
    uint256 constant NOM_9 = 17080034245036527102581054098153726420754189343480087383750235034347285565475;
    uint256 constant NOM_10 = 19427893401270893175165577624569692792476047274672311374276009121939389650554;
    uint256 constant NOM_11 = 7208667475547407094601216394916613443373211299888759357617088146476725307406;
    uint256 constant NOM_12 = 15745485295936535316975388984042528763142055138977213053884878131522653656655;
    uint256 constant NOM_13 = 18428730366279148823440508907540479058859624406874146182487125659132119235963;
    uint256 constant NOM_14 = 15374822226192962912678116898455364879162985419804018948807485336346624871082;
    uint256 constant NOM_15 = 120044591405263862500248166114833878691858992157610271915665512246418104012;
    uint256 constant NOM_16 = 19775689239850517151684802695413609010804692148238703219250121063489799840347;
    uint256 constant NOM_17 = 14645248443707860859980964599636705071791927143830507861103328558899773052564;
    uint256 constant NOM_18 = 19715319372061619748886077276474522984979410161402843189197146625841779474205;
    uint256 constant NOM_19 = 18460696448445547509712873109354565888347720772015760825621533011940028150518;
    uint256 constant NOM_20 = 12514250233825568455601030997628711911933664409209326583550977409828804142394;
    uint256 constant NOM_21 = 11380887777989732681263897923612238703194926938239774623203969704831171419090;
    uint256 constant NOM_22 = 13552257429178589443395395140836308749287131891559224778563166439585936004848;
    uint256 constant NOM_23 = 6427916269988417754245294592550789989052233158017350574195636783846841316920;
    uint256 constant NOM_24 = 10447042445303715111098706442802914572151909573027608366580380407534543038153;
    uint256 constant NOM_25 = 20544628358049693337312431352857344071779838544834096560332502563463246353955;
    uint256 constant NOM_26 = 6799920208311470017317711992415301608215425741141121471145549013568504233957;
    uint256 constant NOM_27 = 15134379754273320691116766801650888791039070201995015824777220503612554072064;
    uint256 constant NOM_28 = 6892264399094313617064369164175893115567953367602762080054515066677269905284;
    uint256 constant NOM_29 = 11602169279190250694376088796417005017624252297585976234546783377023118712138;
    uint256 constant NOM_30 = 17668582740708237376029045192684082379985140125111965727273589314062114975457;
    uint256 constant NOM_31 = 20865608210695970236351381938750963114928541568950271974986130797811952688657;
    uint256 constant NOM_32 = 11187594839711908496594211623092835810415765075501567823927248856847306935995;
    uint256 constant NOM_33 = 14171020258098174704329920190425330906173836301991729782689248665335035199146;
    uint256 constant NOM_34 = 19311178932674191121689526440584515751512216924080946081082585421285666845534;
    uint256 constant NOM_35 = 15178609006380769430237468199871186485132877847752724073826352890572742021552;
    uint256 constant NOM_36 = 11846715026342588226165143839336196288116303106504115140344490724572776896616;
    uint256 constant NOM_37 = 19209462590990189727722970457641177761212929412007553350817542814092402343082;
    uint256 constant NOM_38 = 316609156357178198143262888140211956858262443813286284655018015386477062727;
    uint256 constant NOM_39 = 352307338752841972959741663148393252350906740143499797287605277283991132522;
    uint256 constant NOM_40 = 8837299088385302490544353609704945890660355912119516728259116908011302187558;
    uint256 constant NOM_41 = 13209329779744517854591638237411033013204873876923448866634011533287125334848;
    uint256 constant NOM_42 = 10372874546947344936183081490609207521599693166254715240787847052091948922297;
    uint256 constant NOM_43 = 18754962977207504217048920587167217065639919511080014932401627917222412727779;
    uint256 constant NOM_44 = 6837955367568276781909665106176419604015027057172964692792442443852317432197;
    uint256 constant NOM_45 = 6746375420128285456660177611221704510450323821775218654391700511447466602038;
    uint256 constant NOM_46 = 3184065200705605915172839754721051038640469520925807505842851353381133201731;
    uint256 constant NOM_47 = 19801491326133123373338051020634767007285949045829711493858790501450089641311;
    uint256 constant NOM_48 = 9896246409825640661010928758837234114711394628195465894025623934530730182419;
    uint256 constant NOM_49 = 5193872415824855999628859591214814093861541821503258580371045865597771520961;
    uint256 constant NOM_50 = 5942053965491317293138360686576757703449679879287539967858739694737369898699;
    uint256 constant NOM_51 = 12923489754464948549533795739356523796005688722582879550088947076286388821456;
    uint256 constant NOM_52 = 3408787438635186728753187922089568687857603791272337442583683819174436055058;
    uint256 constant NOM_53 = 21698084112794144773121384161197805792467010323690855075434022239583004319570;
    uint256 constant NOM_54 = 12587639898494672134563193920333448160076784173737920335408948936814892134425;
    uint256 constant NOM_55 = 16677104960342537279170726686951113535089882194626961427960413779275976884161;
    uint256 constant NOM_56 = 15939157565991637447513971801059154769446034526592192410236633589346100494039;
    uint256 constant NOM_57 = 13203560152270692768987256856750979154689692673878656031404205199151729936194;
    uint256 constant NOM_58 = 13919887446752972469316276767442465289598138242098969838237909157640502575768;
    uint256 constant NOM_59 = 13764244977607055063603234426956726875436118511212317139301293740280497034013;
    uint256 constant NOM_60 = 16555750975944088359427185673482707402350281145316923726496922778952422805310;
    uint256 constant NOM_61 = 7570880444650486705465523406410735288193118135213792366198917548830667354006;
    uint256 constant NOM_62 = 3590212991024885490435333071410715245916901268394053775267664068828338916022;
    uint256 constant NOM_63 = 20619542360989881011418802324752879162410856986843836959211456822052031472415;
    uint256 constant NOM_64 = 7239990483756958737257076484283112757271562184025097814261793206608907894174;
    uint256 constant NOM_65 = 19495617831569553757746295376516013283044321834505026029778605400664035464577;
    uint256 constant NOM_66 = 20511797912455514559140211508929724238931858538432217816087601659147142254213;
    uint256 constant NOM_67 = 13303526491165717177446219331052191678969524953434366638407332492611656003525;
    uint256 constant NOM_68 = 11179468151871441060786208623610835217477506277982330111631397721708610608632;
    uint256 constant NOM_69 = 21410111665690334147140659879860260389047496097224309154098088662009790127990;
    uint256 constant NOM_70 = 8963301591719365340734774681657129371715538958350228442416190656934173605416;
    uint256 constant NOM_71 = 10136139453949598971196381537843495105564755747628669431223227935371899031708;
    uint256 constant NOM_72 = 5149249713823302347448483141318065475477683884560646185028947904139679068356;
    uint256 constant NOM_73 = 16438525486646154506425755192273625664028294712811341416614755914101094801658;
    uint256 constant NOM_74 = 20691191862630117457825816701881055478889006159429765737138630131848806766269;
    uint256 constant NOM_75 = 19730872498464208871917822728628849500832375098508051956682570066752042188234;
    uint256 constant NOM_76 = 5162030829636814567192801173999927577866416523501952675160189447425123980936;
    uint256 constant NOM_77 = 12708289195327807839488141723425308456631643150979685174993707961225622707451;
    uint256 constant NOM_78 = 682211406185636881178802919464221889977022957348497339506869732590733242337;
    uint256 constant NOM_79 = 16402809665770503287514770786394581776711182683449393916600665895250378863382;
    uint256 constant NOM_80 = 10331390443002737828394470581862368666622606734277949496191638026959241143720;
    uint256 constant NOM_81 = 12436943433297966378844540378965897968595033725709820091616567051420544671365;
    uint256 constant NOM_82 = 21006158206256895982064482975313871940622557259915751039473380277868302139811;
    uint256 constant NOM_83 = 1165128045226990102521490695308307519780310582097852376343477615596315467673;
    uint256 constant NOM_84 = 537583135676983648779900637188162922062952233674666191964360983326632877720;
    uint256 constant NOM_85 = 16786676940111014800208594117735915874383970713050902877854823326829968076435;
    uint256 constant NOM_86 = 20993845434424818441507812064228214748189616836744112717879539084453915695060;
    uint256 constant NOM_87 = 12624864216676991098467922710315145519356055828541306983825728991969761161891;
    uint256 constant NOM_88 = 2467850588523028438656204356132049363307453926863030374060769000465602979164;
    uint256 constant NOM_89 = 3610163923596058401990367136672287668132232267075991550111619508813159004959;
    uint256 constant NOM_90 = 13801339032722622072675973543938173798592358668746861193187451596710435631655;
    uint256 constant NOM_91 = 13431437255350298030066305999231855393511595770969364778328114578111584135633;
    uint256 constant NOM_92 = 16592063197725276331678499114923050344209964259243284090883423416680903930623;
    uint256 constant NOM_93 = 3694564505797126312637572763603502008361303366292695015977913435441167446173;
    uint256 constant NOM_94 = 13083904270209174003744377829261868195979611721987731255608338562079214355715;
    uint256 constant NOM_95 = 1732730561590083862984042478915123631901376286040959640288105099905087314388;
    uint256 constant NOM_96 = 14295594091702720216557362949976881222255449681613286173011664365444178725946;
    uint256 constant NOM_97 = 2820471904669842714213099686675483872203815925113545730146890097736033591791;
    uint256 constant NOM_98 = 14974992468507992587279143198170459640808023182124871663606291181375375916797;
    uint256 constant NOM_99 = 13975826422087047745009823713216716252479887610483195036401370787404311497568;
    uint256 constant NOM_100 = 21220471065400630751999014617133022670948141271739474639914840340498890272973;
    uint256 constant NOM_101 = 4645111303901982240212523374882936894819072374643150519940477894567775013056;
    uint256 constant NOM_102 = 15232796892828617444331223942112873495467602258839481214478932138502422928856;
    uint256 constant NOM_103 = 15035267758374494014133724839911948475259045409305049039847848228350249339923;
    uint256 constant NOM_104 = 7595126129978561904883967097667157892052412449271018768782325182955943767524;
    uint256 constant NOM_105 = 3552276863467571074916087528793951780977966756856254231514961101947394180145;
    uint256 constant NOM_106 = 7076084751788335169159907972877786645266621398100612232157576293011500563495;
    uint256 constant NOM_107 = 16374156153937020514618081338204917150436501771066796825149570555626300671140;
    uint256 constant NOM_108 = 21209750500137714959417584391792847387107002218616330387705959439246575415289;
    uint256 constant NOM_109 = 7946284314477922558125673600575801903627109027445525056485075481605531176806;
    uint256 constant NOM_110 = 11762849021229631157370464911445623113916787523908446049084658682802005896963;
    uint256 constant NOM_111 = 11499637759471651391889528460648226869365617777061346335592856778939733112318;
    uint256 constant NOM_112 = 3462268295185284736524500495803130181493565744677041550307048487462466518455;
    uint256 constant NOM_113 = 2679534155057245223914575041948823744394496552667404494667262378323676998711;
    uint256 constant NOM_114 = 6758479252461215824253788110307258892851484522538663386388027488465391029821;
    uint256 constant NOM_115 = 14332550097842184881379233752393281097801069910510342870476088886347546490945;
    uint256 constant NOM_116 = 4949602767047381648919197371070225203806371898282113084079177865316704082914;
    uint256 constant NOM_117 = 9142356645007213435480963513610637607819156357975151880806276608009466925019;
    uint256 constant NOM_118 = 15623500336732984179402225418177947687122648873436687468472945736024561420190;
    uint256 constant NOM_119 = 8124771317346517103662025347249823427703484184630735769313368118915948700765;
    uint256 constant NOM_120 = 18320476481171746014621226880543144797975321343322150608371656623852661479147;
    uint256 constant NOM_121 = 10506227830741692140929981396760779864719670175789257464817905520413182118082;
    uint256 constant NOM_122 = 21023775871209195716041995148802303353533559661914013874624197224681813859968;
    uint256 constant NOM_123 = 14366373336192124102314941728923656451047695050283990501489486020793884865898;
    uint256 constant NOM_124 = 6702259610510319563665443054873464697354791218825023916887852747889997291210;
    uint256 constant NOM_125 = 10093991716972437200295494889278949476398176693910892140527016169693049213920;
    uint256 constant NOM_126 = 7908359468494460745818146590386683759792913197282820720101222037352899520790;
    uint256 constant NOM_127 = 7056351807355148645375319520312255121555214659719526421435889483611347047256;


    ////////////////////////////////////// Preprocessed verification key ////////////////////////////////

    uint256 constant G_X = 19760134438617651871453468315483567841071605526694098053742883504090254514364;
    uint256 constant G_Y = 7793307282958081219582865225040306749427619588777494126095807997225038567914;
    uint256 constant H_X_0 = 15107519626438429753219536593708956924652976791314712957797314020274856024409;
    uint256 constant H_X_1 = 14122693296893380104129524497578004632443439377632543312641053195073048228943;
    uint256 constant H_Y_0 = 3755999432472398517198964599208617491776398181264958893260920167271302869584;
    uint256 constant H_Y_1 = 3628672316656067923136354629391974220973066651561656219744429303673984729133;
    uint256 constant ALPHA_G_X = 17117157057832940174282361915717324730879613848801909474443046625162937924738;
    uint256 constant ALPHA_G_Y = 4912946022067341086926247926576655921713090630212747124179044707234477330213;
    uint256 constant BETA_G_X = 6674938903558993035054571578365883078134800890104980674937713805994918596057;
    uint256 constant BETA_G_Y = 3063729283729914084118689934566456601745586698919252761693132744009991923320;
    uint256 constant TAU_H_X_0 = 19755739294702072308064810597738321137133863011448432042811737477294614186354;
    uint256 constant TAU_H_X_1 = 7402033671645717150240329576186857582846987457652861799749233285030402985398;
    uint256 constant TAU_H_Y_0 = 8088563936954206872933002633932719506006545552370278310585878994482044694722;
    uint256 constant TAU_H_Y_1 = 8755609046364811094992203899104917966328729103809389613205406784809722295327;
    uint256 constant DELTA_TWO_H_X_0 = 8444257463180828655082382641071723106553811213214499031744530464596715083038;
    uint256 constant DELTA_TWO_H_X_1 = 3078227587912202320482865994940325897112751752596849976866904527004632776724;
    uint256 constant DELTA_TWO_H_Y_0 = 1892704013847525363054549589001048916241549423418179546196529832810640362035;
    uint256 constant DELTA_TWO_H_Y_1 = 4052909182836464039553378618668476668081637576194760304751880353526624109889;

    /////////////////////////////////////// Helper functions ////////////////////////////////

    /// Exponentiation in Fp.
    /// @notice Returns a number x such that a ^ e = x in Fp.
    /// @notice The input does not need to be reduced.
    /// @param a the base
    /// @param e the exponent
    /// @return x the result
    function exp(uint256 a, uint256 e) internal view returns (uint256 x) {
        bool success;
        assembly ("memory-safe") {
            let f := mload(0x40)
            mstore(f, 0x20)
            mstore(add(f, 0x20), 0x20)
            mstore(add(f, 0x40), 0x20)
            mstore(add(f, 0x60), a)
            mstore(add(f, 0x80), e)
            mstore(add(f, 0xa0), R)
            success := staticcall(gas(), PRECOMPILE_MODEXP, f, 0xc0, f, 0x20)
            x := mload(f)
        }
        if (!success) {
            // Exponentiation failed.
            // Should not happen.
            revert ProofInvalid();
        }
    }

    /// Invertsion in Fr.
    /// @notice Returns a number x such that a * x = 1 in Fr.
    /// @notice The input does not need to be reduced.
    /// @notice Reverts with ProofInvalid() if the inverse does not exist
    /// @param a the input
    /// @return x the solution
    function invert_FR(uint256 a) internal view returns (uint256 x) {
        x = exp(a, EXP_INVERSE_FR);
        if (mulmod(a, x, R) != 1) {
            // Inverse does not exist.
            // Can only happen during G2 point decompression.
            revert ProofInvalid();
        }
    }

    // Computes Z_H(challenge) as the vanishing polynomial for the coset
    // Z_H(x) = x^m-h^m
    // where m = COSET_SIZE and h = COSET_OFFSET
    function compute_vanishing_poly(
        uint256 chall
    ) internal view returns (uint256 result) {
        // Exp uses 0x05 precompile internally
        uint256 tau_exp = exp(chall, COSET_SIZE);
        result = addmod(tau_exp, MINUS_COSET_OFFSET_TO_COSET_SIZE, R);
    }

    // Computes v_q = (v_a^2-v_b)/Z_H(challenge)
    function comp_vq(
        uint256[128] calldata input,
        uint256[6] calldata proof,
        uint256 chall
    ) internal view returns (uint256 v_q) {

        uint256 neg_cur_elem0 = addmod(chall, NEG_H_Gi_0, R); 

                     uint256 neg_cur_elem0_inv = invert_FR(neg_cur_elem0); 

                     uint256 lagrange_0 = mulmod(neg_cur_elem0_inv, NOM_0, R);
 uint256 neg_cur_elem1 = addmod(chall, NEG_H_Gi_1, R); 

                     uint256 neg_cur_elem1_inv = invert_FR(neg_cur_elem1); 

                     uint256 lagrange_1 = mulmod(neg_cur_elem1_inv, NOM_1, R);
 uint256 neg_cur_elem2 = addmod(chall, NEG_H_Gi_2, R); 

                     uint256 neg_cur_elem2_inv = invert_FR(neg_cur_elem2); 

                     uint256 lagrange_2 = mulmod(neg_cur_elem2_inv, NOM_2, R);
 uint256 neg_cur_elem3 = addmod(chall, NEG_H_Gi_3, R); 

                     uint256 neg_cur_elem3_inv = invert_FR(neg_cur_elem3); 

                     uint256 lagrange_3 = mulmod(neg_cur_elem3_inv, NOM_3, R);
 uint256 neg_cur_elem4 = addmod(chall, NEG_H_Gi_4, R); 

                     uint256 neg_cur_elem4_inv = invert_FR(neg_cur_elem4); 

                     uint256 lagrange_4 = mulmod(neg_cur_elem4_inv, NOM_4, R);
 uint256 neg_cur_elem5 = addmod(chall, NEG_H_Gi_5, R); 

                     uint256 neg_cur_elem5_inv = invert_FR(neg_cur_elem5); 

                     uint256 lagrange_5 = mulmod(neg_cur_elem5_inv, NOM_5, R);
 uint256 neg_cur_elem6 = addmod(chall, NEG_H_Gi_6, R); 

                     uint256 neg_cur_elem6_inv = invert_FR(neg_cur_elem6); 

                     uint256 lagrange_6 = mulmod(neg_cur_elem6_inv, NOM_6, R);
 uint256 neg_cur_elem7 = addmod(chall, NEG_H_Gi_7, R); 

                     uint256 neg_cur_elem7_inv = invert_FR(neg_cur_elem7); 

                     uint256 lagrange_7 = mulmod(neg_cur_elem7_inv, NOM_7, R);
 uint256 neg_cur_elem8 = addmod(chall, NEG_H_Gi_8, R); 

                     uint256 neg_cur_elem8_inv = invert_FR(neg_cur_elem8); 

                     uint256 lagrange_8 = mulmod(neg_cur_elem8_inv, NOM_8, R);
 uint256 neg_cur_elem9 = addmod(chall, NEG_H_Gi_9, R); 

                     uint256 neg_cur_elem9_inv = invert_FR(neg_cur_elem9); 

                     uint256 lagrange_9 = mulmod(neg_cur_elem9_inv, NOM_9, R);
 uint256 neg_cur_elem10 = addmod(chall, NEG_H_Gi_10, R); 

                     uint256 neg_cur_elem10_inv = invert_FR(neg_cur_elem10); 

                     uint256 lagrange_10 = mulmod(neg_cur_elem10_inv, NOM_10, R);
 uint256 neg_cur_elem11 = addmod(chall, NEG_H_Gi_11, R); 

                     uint256 neg_cur_elem11_inv = invert_FR(neg_cur_elem11); 

                     uint256 lagrange_11 = mulmod(neg_cur_elem11_inv, NOM_11, R);
 uint256 neg_cur_elem12 = addmod(chall, NEG_H_Gi_12, R); 

                     uint256 neg_cur_elem12_inv = invert_FR(neg_cur_elem12); 

                     uint256 lagrange_12 = mulmod(neg_cur_elem12_inv, NOM_12, R);
 uint256 neg_cur_elem13 = addmod(chall, NEG_H_Gi_13, R); 

                     uint256 neg_cur_elem13_inv = invert_FR(neg_cur_elem13); 

                     uint256 lagrange_13 = mulmod(neg_cur_elem13_inv, NOM_13, R);
 uint256 neg_cur_elem14 = addmod(chall, NEG_H_Gi_14, R); 

                     uint256 neg_cur_elem14_inv = invert_FR(neg_cur_elem14); 

                     uint256 lagrange_14 = mulmod(neg_cur_elem14_inv, NOM_14, R);
 uint256 neg_cur_elem15 = addmod(chall, NEG_H_Gi_15, R); 

                     uint256 neg_cur_elem15_inv = invert_FR(neg_cur_elem15); 

                     uint256 lagrange_15 = mulmod(neg_cur_elem15_inv, NOM_15, R);
 uint256 neg_cur_elem16 = addmod(chall, NEG_H_Gi_16, R); 

                     uint256 neg_cur_elem16_inv = invert_FR(neg_cur_elem16); 

                     uint256 lagrange_16 = mulmod(neg_cur_elem16_inv, NOM_16, R);
 uint256 neg_cur_elem17 = addmod(chall, NEG_H_Gi_17, R); 

                     uint256 neg_cur_elem17_inv = invert_FR(neg_cur_elem17); 

                     uint256 lagrange_17 = mulmod(neg_cur_elem17_inv, NOM_17, R);
 uint256 neg_cur_elem18 = addmod(chall, NEG_H_Gi_18, R); 

                     uint256 neg_cur_elem18_inv = invert_FR(neg_cur_elem18); 

                     uint256 lagrange_18 = mulmod(neg_cur_elem18_inv, NOM_18, R);
 uint256 neg_cur_elem19 = addmod(chall, NEG_H_Gi_19, R); 

                     uint256 neg_cur_elem19_inv = invert_FR(neg_cur_elem19); 

                     uint256 lagrange_19 = mulmod(neg_cur_elem19_inv, NOM_19, R);
 uint256 neg_cur_elem20 = addmod(chall, NEG_H_Gi_20, R); 

                     uint256 neg_cur_elem20_inv = invert_FR(neg_cur_elem20); 

                     uint256 lagrange_20 = mulmod(neg_cur_elem20_inv, NOM_20, R);
 uint256 neg_cur_elem21 = addmod(chall, NEG_H_Gi_21, R); 

                     uint256 neg_cur_elem21_inv = invert_FR(neg_cur_elem21); 

                     uint256 lagrange_21 = mulmod(neg_cur_elem21_inv, NOM_21, R);
 uint256 neg_cur_elem22 = addmod(chall, NEG_H_Gi_22, R); 

                     uint256 neg_cur_elem22_inv = invert_FR(neg_cur_elem22); 

                     uint256 lagrange_22 = mulmod(neg_cur_elem22_inv, NOM_22, R);
 uint256 neg_cur_elem23 = addmod(chall, NEG_H_Gi_23, R); 

                     uint256 neg_cur_elem23_inv = invert_FR(neg_cur_elem23); 

                     uint256 lagrange_23 = mulmod(neg_cur_elem23_inv, NOM_23, R);
 uint256 neg_cur_elem24 = addmod(chall, NEG_H_Gi_24, R); 

                     uint256 neg_cur_elem24_inv = invert_FR(neg_cur_elem24); 

                     uint256 lagrange_24 = mulmod(neg_cur_elem24_inv, NOM_24, R);
 uint256 neg_cur_elem25 = addmod(chall, NEG_H_Gi_25, R); 

                     uint256 neg_cur_elem25_inv = invert_FR(neg_cur_elem25); 

                     uint256 lagrange_25 = mulmod(neg_cur_elem25_inv, NOM_25, R);
 uint256 neg_cur_elem26 = addmod(chall, NEG_H_Gi_26, R); 

                     uint256 neg_cur_elem26_inv = invert_FR(neg_cur_elem26); 

                     uint256 lagrange_26 = mulmod(neg_cur_elem26_inv, NOM_26, R);
 uint256 neg_cur_elem27 = addmod(chall, NEG_H_Gi_27, R); 

                     uint256 neg_cur_elem27_inv = invert_FR(neg_cur_elem27); 

                     uint256 lagrange_27 = mulmod(neg_cur_elem27_inv, NOM_27, R);
 uint256 neg_cur_elem28 = addmod(chall, NEG_H_Gi_28, R); 

                     uint256 neg_cur_elem28_inv = invert_FR(neg_cur_elem28); 

                     uint256 lagrange_28 = mulmod(neg_cur_elem28_inv, NOM_28, R);
 uint256 neg_cur_elem29 = addmod(chall, NEG_H_Gi_29, R); 

                     uint256 neg_cur_elem29_inv = invert_FR(neg_cur_elem29); 

                     uint256 lagrange_29 = mulmod(neg_cur_elem29_inv, NOM_29, R);
 uint256 neg_cur_elem30 = addmod(chall, NEG_H_Gi_30, R); 

                     uint256 neg_cur_elem30_inv = invert_FR(neg_cur_elem30); 

                     uint256 lagrange_30 = mulmod(neg_cur_elem30_inv, NOM_30, R);
 uint256 neg_cur_elem31 = addmod(chall, NEG_H_Gi_31, R); 

                     uint256 neg_cur_elem31_inv = invert_FR(neg_cur_elem31); 

                     uint256 lagrange_31 = mulmod(neg_cur_elem31_inv, NOM_31, R);
 uint256 neg_cur_elem32 = addmod(chall, NEG_H_Gi_32, R); 

                     uint256 neg_cur_elem32_inv = invert_FR(neg_cur_elem32); 

                     uint256 lagrange_32 = mulmod(neg_cur_elem32_inv, NOM_32, R);
 uint256 neg_cur_elem33 = addmod(chall, NEG_H_Gi_33, R); 

                     uint256 neg_cur_elem33_inv = invert_FR(neg_cur_elem33); 

                     uint256 lagrange_33 = mulmod(neg_cur_elem33_inv, NOM_33, R);
 uint256 neg_cur_elem34 = addmod(chall, NEG_H_Gi_34, R); 

                     uint256 neg_cur_elem34_inv = invert_FR(neg_cur_elem34); 

                     uint256 lagrange_34 = mulmod(neg_cur_elem34_inv, NOM_34, R);
 uint256 neg_cur_elem35 = addmod(chall, NEG_H_Gi_35, R); 

                     uint256 neg_cur_elem35_inv = invert_FR(neg_cur_elem35); 

                     uint256 lagrange_35 = mulmod(neg_cur_elem35_inv, NOM_35, R);
 uint256 neg_cur_elem36 = addmod(chall, NEG_H_Gi_36, R); 

                     uint256 neg_cur_elem36_inv = invert_FR(neg_cur_elem36); 

                     uint256 lagrange_36 = mulmod(neg_cur_elem36_inv, NOM_36, R);
 uint256 neg_cur_elem37 = addmod(chall, NEG_H_Gi_37, R); 

                     uint256 neg_cur_elem37_inv = invert_FR(neg_cur_elem37); 

                     uint256 lagrange_37 = mulmod(neg_cur_elem37_inv, NOM_37, R);
 uint256 neg_cur_elem38 = addmod(chall, NEG_H_Gi_38, R); 

                     uint256 neg_cur_elem38_inv = invert_FR(neg_cur_elem38); 

                     uint256 lagrange_38 = mulmod(neg_cur_elem38_inv, NOM_38, R);
 uint256 neg_cur_elem39 = addmod(chall, NEG_H_Gi_39, R); 

                     uint256 neg_cur_elem39_inv = invert_FR(neg_cur_elem39); 

                     uint256 lagrange_39 = mulmod(neg_cur_elem39_inv, NOM_39, R);
 uint256 neg_cur_elem40 = addmod(chall, NEG_H_Gi_40, R); 

                     uint256 neg_cur_elem40_inv = invert_FR(neg_cur_elem40); 

                     uint256 lagrange_40 = mulmod(neg_cur_elem40_inv, NOM_40, R);
 uint256 neg_cur_elem41 = addmod(chall, NEG_H_Gi_41, R); 

                     uint256 neg_cur_elem41_inv = invert_FR(neg_cur_elem41); 

                     uint256 lagrange_41 = mulmod(neg_cur_elem41_inv, NOM_41, R);
 uint256 neg_cur_elem42 = addmod(chall, NEG_H_Gi_42, R); 

                     uint256 neg_cur_elem42_inv = invert_FR(neg_cur_elem42); 

                     uint256 lagrange_42 = mulmod(neg_cur_elem42_inv, NOM_42, R);
 uint256 neg_cur_elem43 = addmod(chall, NEG_H_Gi_43, R); 

                     uint256 neg_cur_elem43_inv = invert_FR(neg_cur_elem43); 

                     uint256 lagrange_43 = mulmod(neg_cur_elem43_inv, NOM_43, R);
 uint256 neg_cur_elem44 = addmod(chall, NEG_H_Gi_44, R); 

                     uint256 neg_cur_elem44_inv = invert_FR(neg_cur_elem44); 

                     uint256 lagrange_44 = mulmod(neg_cur_elem44_inv, NOM_44, R);
 uint256 neg_cur_elem45 = addmod(chall, NEG_H_Gi_45, R); 

                     uint256 neg_cur_elem45_inv = invert_FR(neg_cur_elem45); 

                     uint256 lagrange_45 = mulmod(neg_cur_elem45_inv, NOM_45, R);
 uint256 neg_cur_elem46 = addmod(chall, NEG_H_Gi_46, R); 

                     uint256 neg_cur_elem46_inv = invert_FR(neg_cur_elem46); 

                     uint256 lagrange_46 = mulmod(neg_cur_elem46_inv, NOM_46, R);
 uint256 neg_cur_elem47 = addmod(chall, NEG_H_Gi_47, R); 

                     uint256 neg_cur_elem47_inv = invert_FR(neg_cur_elem47); 

                     uint256 lagrange_47 = mulmod(neg_cur_elem47_inv, NOM_47, R);
 uint256 neg_cur_elem48 = addmod(chall, NEG_H_Gi_48, R); 

                     uint256 neg_cur_elem48_inv = invert_FR(neg_cur_elem48); 

                     uint256 lagrange_48 = mulmod(neg_cur_elem48_inv, NOM_48, R);
 uint256 neg_cur_elem49 = addmod(chall, NEG_H_Gi_49, R); 

                     uint256 neg_cur_elem49_inv = invert_FR(neg_cur_elem49); 

                     uint256 lagrange_49 = mulmod(neg_cur_elem49_inv, NOM_49, R);
 uint256 neg_cur_elem50 = addmod(chall, NEG_H_Gi_50, R); 

                     uint256 neg_cur_elem50_inv = invert_FR(neg_cur_elem50); 

                     uint256 lagrange_50 = mulmod(neg_cur_elem50_inv, NOM_50, R);
 uint256 neg_cur_elem51 = addmod(chall, NEG_H_Gi_51, R); 

                     uint256 neg_cur_elem51_inv = invert_FR(neg_cur_elem51); 

                     uint256 lagrange_51 = mulmod(neg_cur_elem51_inv, NOM_51, R);
 uint256 neg_cur_elem52 = addmod(chall, NEG_H_Gi_52, R); 

                     uint256 neg_cur_elem52_inv = invert_FR(neg_cur_elem52); 

                     uint256 lagrange_52 = mulmod(neg_cur_elem52_inv, NOM_52, R);
 uint256 neg_cur_elem53 = addmod(chall, NEG_H_Gi_53, R); 

                     uint256 neg_cur_elem53_inv = invert_FR(neg_cur_elem53); 

                     uint256 lagrange_53 = mulmod(neg_cur_elem53_inv, NOM_53, R);
 uint256 neg_cur_elem54 = addmod(chall, NEG_H_Gi_54, R); 

                     uint256 neg_cur_elem54_inv = invert_FR(neg_cur_elem54); 

                     uint256 lagrange_54 = mulmod(neg_cur_elem54_inv, NOM_54, R);
 uint256 neg_cur_elem55 = addmod(chall, NEG_H_Gi_55, R); 

                     uint256 neg_cur_elem55_inv = invert_FR(neg_cur_elem55); 

                     uint256 lagrange_55 = mulmod(neg_cur_elem55_inv, NOM_55, R);
 uint256 neg_cur_elem56 = addmod(chall, NEG_H_Gi_56, R); 

                     uint256 neg_cur_elem56_inv = invert_FR(neg_cur_elem56); 

                     uint256 lagrange_56 = mulmod(neg_cur_elem56_inv, NOM_56, R);
 uint256 neg_cur_elem57 = addmod(chall, NEG_H_Gi_57, R); 

                     uint256 neg_cur_elem57_inv = invert_FR(neg_cur_elem57); 

                     uint256 lagrange_57 = mulmod(neg_cur_elem57_inv, NOM_57, R);
 uint256 neg_cur_elem58 = addmod(chall, NEG_H_Gi_58, R); 

                     uint256 neg_cur_elem58_inv = invert_FR(neg_cur_elem58); 

                     uint256 lagrange_58 = mulmod(neg_cur_elem58_inv, NOM_58, R);
 uint256 neg_cur_elem59 = addmod(chall, NEG_H_Gi_59, R); 

                     uint256 neg_cur_elem59_inv = invert_FR(neg_cur_elem59); 

                     uint256 lagrange_59 = mulmod(neg_cur_elem59_inv, NOM_59, R);
 uint256 neg_cur_elem60 = addmod(chall, NEG_H_Gi_60, R); 

                     uint256 neg_cur_elem60_inv = invert_FR(neg_cur_elem60); 

                     uint256 lagrange_60 = mulmod(neg_cur_elem60_inv, NOM_60, R);
 uint256 neg_cur_elem61 = addmod(chall, NEG_H_Gi_61, R); 

                     uint256 neg_cur_elem61_inv = invert_FR(neg_cur_elem61); 

                     uint256 lagrange_61 = mulmod(neg_cur_elem61_inv, NOM_61, R);
 uint256 neg_cur_elem62 = addmod(chall, NEG_H_Gi_62, R); 

                     uint256 neg_cur_elem62_inv = invert_FR(neg_cur_elem62); 

                     uint256 lagrange_62 = mulmod(neg_cur_elem62_inv, NOM_62, R);
 uint256 neg_cur_elem63 = addmod(chall, NEG_H_Gi_63, R); 

                     uint256 neg_cur_elem63_inv = invert_FR(neg_cur_elem63); 

                     uint256 lagrange_63 = mulmod(neg_cur_elem63_inv, NOM_63, R);
 uint256 neg_cur_elem64 = addmod(chall, NEG_H_Gi_64, R); 

                     uint256 neg_cur_elem64_inv = invert_FR(neg_cur_elem64); 

                     uint256 lagrange_64 = mulmod(neg_cur_elem64_inv, NOM_64, R);
 uint256 neg_cur_elem65 = addmod(chall, NEG_H_Gi_65, R); 

                     uint256 neg_cur_elem65_inv = invert_FR(neg_cur_elem65); 

                     uint256 lagrange_65 = mulmod(neg_cur_elem65_inv, NOM_65, R);
 uint256 neg_cur_elem66 = addmod(chall, NEG_H_Gi_66, R); 

                     uint256 neg_cur_elem66_inv = invert_FR(neg_cur_elem66); 

                     uint256 lagrange_66 = mulmod(neg_cur_elem66_inv, NOM_66, R);
 uint256 neg_cur_elem67 = addmod(chall, NEG_H_Gi_67, R); 

                     uint256 neg_cur_elem67_inv = invert_FR(neg_cur_elem67); 

                     uint256 lagrange_67 = mulmod(neg_cur_elem67_inv, NOM_67, R);
 uint256 neg_cur_elem68 = addmod(chall, NEG_H_Gi_68, R); 

                     uint256 neg_cur_elem68_inv = invert_FR(neg_cur_elem68); 

                     uint256 lagrange_68 = mulmod(neg_cur_elem68_inv, NOM_68, R);
 uint256 neg_cur_elem69 = addmod(chall, NEG_H_Gi_69, R); 

                     uint256 neg_cur_elem69_inv = invert_FR(neg_cur_elem69); 

                     uint256 lagrange_69 = mulmod(neg_cur_elem69_inv, NOM_69, R);
 uint256 neg_cur_elem70 = addmod(chall, NEG_H_Gi_70, R); 

                     uint256 neg_cur_elem70_inv = invert_FR(neg_cur_elem70); 

                     uint256 lagrange_70 = mulmod(neg_cur_elem70_inv, NOM_70, R);
 uint256 neg_cur_elem71 = addmod(chall, NEG_H_Gi_71, R); 

                     uint256 neg_cur_elem71_inv = invert_FR(neg_cur_elem71); 

                     uint256 lagrange_71 = mulmod(neg_cur_elem71_inv, NOM_71, R);
 uint256 neg_cur_elem72 = addmod(chall, NEG_H_Gi_72, R); 

                     uint256 neg_cur_elem72_inv = invert_FR(neg_cur_elem72); 

                     uint256 lagrange_72 = mulmod(neg_cur_elem72_inv, NOM_72, R);
 uint256 neg_cur_elem73 = addmod(chall, NEG_H_Gi_73, R); 

                     uint256 neg_cur_elem73_inv = invert_FR(neg_cur_elem73); 

                     uint256 lagrange_73 = mulmod(neg_cur_elem73_inv, NOM_73, R);
 uint256 neg_cur_elem74 = addmod(chall, NEG_H_Gi_74, R); 

                     uint256 neg_cur_elem74_inv = invert_FR(neg_cur_elem74); 

                     uint256 lagrange_74 = mulmod(neg_cur_elem74_inv, NOM_74, R);
 uint256 neg_cur_elem75 = addmod(chall, NEG_H_Gi_75, R); 

                     uint256 neg_cur_elem75_inv = invert_FR(neg_cur_elem75); 

                     uint256 lagrange_75 = mulmod(neg_cur_elem75_inv, NOM_75, R);
 uint256 neg_cur_elem76 = addmod(chall, NEG_H_Gi_76, R); 

                     uint256 neg_cur_elem76_inv = invert_FR(neg_cur_elem76); 

                     uint256 lagrange_76 = mulmod(neg_cur_elem76_inv, NOM_76, R);
 uint256 neg_cur_elem77 = addmod(chall, NEG_H_Gi_77, R); 

                     uint256 neg_cur_elem77_inv = invert_FR(neg_cur_elem77); 

                     uint256 lagrange_77 = mulmod(neg_cur_elem77_inv, NOM_77, R);
 uint256 neg_cur_elem78 = addmod(chall, NEG_H_Gi_78, R); 

                     uint256 neg_cur_elem78_inv = invert_FR(neg_cur_elem78); 

                     uint256 lagrange_78 = mulmod(neg_cur_elem78_inv, NOM_78, R);
 uint256 neg_cur_elem79 = addmod(chall, NEG_H_Gi_79, R); 

                     uint256 neg_cur_elem79_inv = invert_FR(neg_cur_elem79); 

                     uint256 lagrange_79 = mulmod(neg_cur_elem79_inv, NOM_79, R);
 uint256 neg_cur_elem80 = addmod(chall, NEG_H_Gi_80, R); 

                     uint256 neg_cur_elem80_inv = invert_FR(neg_cur_elem80); 

                     uint256 lagrange_80 = mulmod(neg_cur_elem80_inv, NOM_80, R);
 uint256 neg_cur_elem81 = addmod(chall, NEG_H_Gi_81, R); 

                     uint256 neg_cur_elem81_inv = invert_FR(neg_cur_elem81); 

                     uint256 lagrange_81 = mulmod(neg_cur_elem81_inv, NOM_81, R);
 uint256 neg_cur_elem82 = addmod(chall, NEG_H_Gi_82, R); 

                     uint256 neg_cur_elem82_inv = invert_FR(neg_cur_elem82); 

                     uint256 lagrange_82 = mulmod(neg_cur_elem82_inv, NOM_82, R);
 uint256 neg_cur_elem83 = addmod(chall, NEG_H_Gi_83, R); 

                     uint256 neg_cur_elem83_inv = invert_FR(neg_cur_elem83); 

                     uint256 lagrange_83 = mulmod(neg_cur_elem83_inv, NOM_83, R);
 uint256 neg_cur_elem84 = addmod(chall, NEG_H_Gi_84, R); 

                     uint256 neg_cur_elem84_inv = invert_FR(neg_cur_elem84); 

                     uint256 lagrange_84 = mulmod(neg_cur_elem84_inv, NOM_84, R);
 uint256 neg_cur_elem85 = addmod(chall, NEG_H_Gi_85, R); 

                     uint256 neg_cur_elem85_inv = invert_FR(neg_cur_elem85); 

                     uint256 lagrange_85 = mulmod(neg_cur_elem85_inv, NOM_85, R);
 uint256 neg_cur_elem86 = addmod(chall, NEG_H_Gi_86, R); 

                     uint256 neg_cur_elem86_inv = invert_FR(neg_cur_elem86); 

                     uint256 lagrange_86 = mulmod(neg_cur_elem86_inv, NOM_86, R);
 uint256 neg_cur_elem87 = addmod(chall, NEG_H_Gi_87, R); 

                     uint256 neg_cur_elem87_inv = invert_FR(neg_cur_elem87); 

                     uint256 lagrange_87 = mulmod(neg_cur_elem87_inv, NOM_87, R);
 uint256 neg_cur_elem88 = addmod(chall, NEG_H_Gi_88, R); 

                     uint256 neg_cur_elem88_inv = invert_FR(neg_cur_elem88); 

                     uint256 lagrange_88 = mulmod(neg_cur_elem88_inv, NOM_88, R);
 uint256 neg_cur_elem89 = addmod(chall, NEG_H_Gi_89, R); 

                     uint256 neg_cur_elem89_inv = invert_FR(neg_cur_elem89); 

                     uint256 lagrange_89 = mulmod(neg_cur_elem89_inv, NOM_89, R);
 uint256 neg_cur_elem90 = addmod(chall, NEG_H_Gi_90, R); 

                     uint256 neg_cur_elem90_inv = invert_FR(neg_cur_elem90); 

                     uint256 lagrange_90 = mulmod(neg_cur_elem90_inv, NOM_90, R);
 uint256 neg_cur_elem91 = addmod(chall, NEG_H_Gi_91, R); 

                     uint256 neg_cur_elem91_inv = invert_FR(neg_cur_elem91); 

                     uint256 lagrange_91 = mulmod(neg_cur_elem91_inv, NOM_91, R);
 uint256 neg_cur_elem92 = addmod(chall, NEG_H_Gi_92, R); 

                     uint256 neg_cur_elem92_inv = invert_FR(neg_cur_elem92); 

                     uint256 lagrange_92 = mulmod(neg_cur_elem92_inv, NOM_92, R);
 uint256 neg_cur_elem93 = addmod(chall, NEG_H_Gi_93, R); 

                     uint256 neg_cur_elem93_inv = invert_FR(neg_cur_elem93); 

                     uint256 lagrange_93 = mulmod(neg_cur_elem93_inv, NOM_93, R);
 uint256 neg_cur_elem94 = addmod(chall, NEG_H_Gi_94, R); 

                     uint256 neg_cur_elem94_inv = invert_FR(neg_cur_elem94); 

                     uint256 lagrange_94 = mulmod(neg_cur_elem94_inv, NOM_94, R);
 uint256 neg_cur_elem95 = addmod(chall, NEG_H_Gi_95, R); 

                     uint256 neg_cur_elem95_inv = invert_FR(neg_cur_elem95); 

                     uint256 lagrange_95 = mulmod(neg_cur_elem95_inv, NOM_95, R);
 uint256 neg_cur_elem96 = addmod(chall, NEG_H_Gi_96, R); 

                     uint256 neg_cur_elem96_inv = invert_FR(neg_cur_elem96); 

                     uint256 lagrange_96 = mulmod(neg_cur_elem96_inv, NOM_96, R);
 uint256 neg_cur_elem97 = addmod(chall, NEG_H_Gi_97, R); 

                     uint256 neg_cur_elem97_inv = invert_FR(neg_cur_elem97); 

                     uint256 lagrange_97 = mulmod(neg_cur_elem97_inv, NOM_97, R);
 uint256 neg_cur_elem98 = addmod(chall, NEG_H_Gi_98, R); 

                     uint256 neg_cur_elem98_inv = invert_FR(neg_cur_elem98); 

                     uint256 lagrange_98 = mulmod(neg_cur_elem98_inv, NOM_98, R);
 uint256 neg_cur_elem99 = addmod(chall, NEG_H_Gi_99, R); 

                     uint256 neg_cur_elem99_inv = invert_FR(neg_cur_elem99); 

                     uint256 lagrange_99 = mulmod(neg_cur_elem99_inv, NOM_99, R);
 uint256 neg_cur_elem100 = addmod(chall, NEG_H_Gi_100, R); 

                     uint256 neg_cur_elem100_inv = invert_FR(neg_cur_elem100); 

                     uint256 lagrange_100 = mulmod(neg_cur_elem100_inv, NOM_100, R);
 uint256 neg_cur_elem101 = addmod(chall, NEG_H_Gi_101, R); 

                     uint256 neg_cur_elem101_inv = invert_FR(neg_cur_elem101); 

                     uint256 lagrange_101 = mulmod(neg_cur_elem101_inv, NOM_101, R);
 uint256 neg_cur_elem102 = addmod(chall, NEG_H_Gi_102, R); 

                     uint256 neg_cur_elem102_inv = invert_FR(neg_cur_elem102); 

                     uint256 lagrange_102 = mulmod(neg_cur_elem102_inv, NOM_102, R);
 uint256 neg_cur_elem103 = addmod(chall, NEG_H_Gi_103, R); 

                     uint256 neg_cur_elem103_inv = invert_FR(neg_cur_elem103); 

                     uint256 lagrange_103 = mulmod(neg_cur_elem103_inv, NOM_103, R);
 uint256 neg_cur_elem104 = addmod(chall, NEG_H_Gi_104, R); 

                     uint256 neg_cur_elem104_inv = invert_FR(neg_cur_elem104); 

                     uint256 lagrange_104 = mulmod(neg_cur_elem104_inv, NOM_104, R);
 uint256 neg_cur_elem105 = addmod(chall, NEG_H_Gi_105, R); 

                     uint256 neg_cur_elem105_inv = invert_FR(neg_cur_elem105); 

                     uint256 lagrange_105 = mulmod(neg_cur_elem105_inv, NOM_105, R);
 uint256 neg_cur_elem106 = addmod(chall, NEG_H_Gi_106, R); 

                     uint256 neg_cur_elem106_inv = invert_FR(neg_cur_elem106); 

                     uint256 lagrange_106 = mulmod(neg_cur_elem106_inv, NOM_106, R);
 uint256 neg_cur_elem107 = addmod(chall, NEG_H_Gi_107, R); 

                     uint256 neg_cur_elem107_inv = invert_FR(neg_cur_elem107); 

                     uint256 lagrange_107 = mulmod(neg_cur_elem107_inv, NOM_107, R);
 uint256 neg_cur_elem108 = addmod(chall, NEG_H_Gi_108, R); 

                     uint256 neg_cur_elem108_inv = invert_FR(neg_cur_elem108); 

                     uint256 lagrange_108 = mulmod(neg_cur_elem108_inv, NOM_108, R);
 uint256 neg_cur_elem109 = addmod(chall, NEG_H_Gi_109, R); 

                     uint256 neg_cur_elem109_inv = invert_FR(neg_cur_elem109); 

                     uint256 lagrange_109 = mulmod(neg_cur_elem109_inv, NOM_109, R);
 uint256 neg_cur_elem110 = addmod(chall, NEG_H_Gi_110, R); 

                     uint256 neg_cur_elem110_inv = invert_FR(neg_cur_elem110); 

                     uint256 lagrange_110 = mulmod(neg_cur_elem110_inv, NOM_110, R);
 uint256 neg_cur_elem111 = addmod(chall, NEG_H_Gi_111, R); 

                     uint256 neg_cur_elem111_inv = invert_FR(neg_cur_elem111); 

                     uint256 lagrange_111 = mulmod(neg_cur_elem111_inv, NOM_111, R);
 uint256 neg_cur_elem112 = addmod(chall, NEG_H_Gi_112, R); 

                     uint256 neg_cur_elem112_inv = invert_FR(neg_cur_elem112); 

                     uint256 lagrange_112 = mulmod(neg_cur_elem112_inv, NOM_112, R);
 uint256 neg_cur_elem113 = addmod(chall, NEG_H_Gi_113, R); 

                     uint256 neg_cur_elem113_inv = invert_FR(neg_cur_elem113); 

                     uint256 lagrange_113 = mulmod(neg_cur_elem113_inv, NOM_113, R);
 uint256 neg_cur_elem114 = addmod(chall, NEG_H_Gi_114, R); 

                     uint256 neg_cur_elem114_inv = invert_FR(neg_cur_elem114); 

                     uint256 lagrange_114 = mulmod(neg_cur_elem114_inv, NOM_114, R);
 uint256 neg_cur_elem115 = addmod(chall, NEG_H_Gi_115, R); 

                     uint256 neg_cur_elem115_inv = invert_FR(neg_cur_elem115); 

                     uint256 lagrange_115 = mulmod(neg_cur_elem115_inv, NOM_115, R);
 uint256 neg_cur_elem116 = addmod(chall, NEG_H_Gi_116, R); 

                     uint256 neg_cur_elem116_inv = invert_FR(neg_cur_elem116); 

                     uint256 lagrange_116 = mulmod(neg_cur_elem116_inv, NOM_116, R);
 uint256 neg_cur_elem117 = addmod(chall, NEG_H_Gi_117, R); 

                     uint256 neg_cur_elem117_inv = invert_FR(neg_cur_elem117); 

                     uint256 lagrange_117 = mulmod(neg_cur_elem117_inv, NOM_117, R);
 uint256 neg_cur_elem118 = addmod(chall, NEG_H_Gi_118, R); 

                     uint256 neg_cur_elem118_inv = invert_FR(neg_cur_elem118); 

                     uint256 lagrange_118 = mulmod(neg_cur_elem118_inv, NOM_118, R);
 uint256 neg_cur_elem119 = addmod(chall, NEG_H_Gi_119, R); 

                     uint256 neg_cur_elem119_inv = invert_FR(neg_cur_elem119); 

                     uint256 lagrange_119 = mulmod(neg_cur_elem119_inv, NOM_119, R);
 uint256 neg_cur_elem120 = addmod(chall, NEG_H_Gi_120, R); 

                     uint256 neg_cur_elem120_inv = invert_FR(neg_cur_elem120); 

                     uint256 lagrange_120 = mulmod(neg_cur_elem120_inv, NOM_120, R);
 uint256 neg_cur_elem121 = addmod(chall, NEG_H_Gi_121, R); 

                     uint256 neg_cur_elem121_inv = invert_FR(neg_cur_elem121); 

                     uint256 lagrange_121 = mulmod(neg_cur_elem121_inv, NOM_121, R);
 uint256 neg_cur_elem122 = addmod(chall, NEG_H_Gi_122, R); 

                     uint256 neg_cur_elem122_inv = invert_FR(neg_cur_elem122); 

                     uint256 lagrange_122 = mulmod(neg_cur_elem122_inv, NOM_122, R);
 uint256 neg_cur_elem123 = addmod(chall, NEG_H_Gi_123, R); 

                     uint256 neg_cur_elem123_inv = invert_FR(neg_cur_elem123); 

                     uint256 lagrange_123 = mulmod(neg_cur_elem123_inv, NOM_123, R);
 uint256 neg_cur_elem124 = addmod(chall, NEG_H_Gi_124, R); 

                     uint256 neg_cur_elem124_inv = invert_FR(neg_cur_elem124); 

                     uint256 lagrange_124 = mulmod(neg_cur_elem124_inv, NOM_124, R);
 uint256 neg_cur_elem125 = addmod(chall, NEG_H_Gi_125, R); 

                     uint256 neg_cur_elem125_inv = invert_FR(neg_cur_elem125); 

                     uint256 lagrange_125 = mulmod(neg_cur_elem125_inv, NOM_125, R);
 uint256 neg_cur_elem126 = addmod(chall, NEG_H_Gi_126, R); 

                     uint256 neg_cur_elem126_inv = invert_FR(neg_cur_elem126); 

                     uint256 lagrange_126 = mulmod(neg_cur_elem126_inv, NOM_126, R);
 uint256 neg_cur_elem127 = addmod(chall, NEG_H_Gi_127, R); 

                     uint256 neg_cur_elem127_inv = invert_FR(neg_cur_elem127); 

                     uint256 lagrange_127 = mulmod(neg_cur_elem127_inv, NOM_127, R);


uint256 x_a = addmod(addmod(addmod(addmod(addmod(addmod(addmod(mulmod(lagrange_0, input[0], R), mulmod(lagrange_1, input[1], R), R), addmod(mulmod(lagrange_2, input[2], R), mulmod(lagrange_3, input[3], R), R), R), addmod(addmod(mulmod(lagrange_4, input[4], R), mulmod(lagrange_5, input[5], R), R), addmod(mulmod(lagrange_6, input[6], R), mulmod(lagrange_7, input[7], R), R), R), R), addmod(addmod(addmod(mulmod(lagrange_8, input[8], R), mulmod(lagrange_9, input[9], R), R), addmod(mulmod(lagrange_10, input[10], R), mulmod(lagrange_11, input[11], R), R), R), addmod(addmod(mulmod(lagrange_12, input[12], R), mulmod(lagrange_13, input[13], R), R), addmod(mulmod(lagrange_14, input[14], R), mulmod(lagrange_15, input[15], R), R), R), R), R), addmod(addmod(addmod(addmod(mulmod(lagrange_16, input[16], R), mulmod(lagrange_17, input[17], R), R), addmod(mulmod(lagrange_18, input[18], R), mulmod(lagrange_19, input[19], R), R), R), addmod(addmod(mulmod(lagrange_20, input[20], R), mulmod(lagrange_21, input[21], R), R), addmod(mulmod(lagrange_22, input[22], R), mulmod(lagrange_23, input[23], R), R), R), R), addmod(addmod(addmod(mulmod(lagrange_24, input[24], R), mulmod(lagrange_25, input[25], R), R), addmod(mulmod(lagrange_26, input[26], R), mulmod(lagrange_27, input[27], R), R), R), addmod(addmod(mulmod(lagrange_28, input[28], R), mulmod(lagrange_29, input[29], R), R), addmod(mulmod(lagrange_30, input[30], R), mulmod(lagrange_31, input[31], R), R), R), R), R), R), addmod(addmod(addmod(addmod(addmod(mulmod(lagrange_32, input[32], R), mulmod(lagrange_33, input[33], R), R), addmod(mulmod(lagrange_34, input[34], R), mulmod(lagrange_35, input[35], R), R), R), addmod(addmod(mulmod(lagrange_36, input[36], R), mulmod(lagrange_37, input[37], R), R), addmod(mulmod(lagrange_38, input[38], R), mulmod(lagrange_39, input[39], R), R), R), R), addmod(addmod(addmod(mulmod(lagrange_40, input[40], R), mulmod(lagrange_41, input[41], R), R), addmod(mulmod(lagrange_42, input[42], R), mulmod(lagrange_43, input[43], R), R), R), addmod(addmod(mulmod(lagrange_44, input[44], R), mulmod(lagrange_45, input[45], R), R), addmod(mulmod(lagrange_46, input[46], R), mulmod(lagrange_47, input[47], R), R), R), R), R), addmod(addmod(addmod(addmod(mulmod(lagrange_48, input[48], R), mulmod(lagrange_49, input[49], R), R), addmod(mulmod(lagrange_50, input[50], R), mulmod(lagrange_51, input[51], R), R), R), addmod(addmod(mulmod(lagrange_52, input[52], R), mulmod(lagrange_53, input[53], R), R), addmod(mulmod(lagrange_54, input[54], R), mulmod(lagrange_55, input[55], R), R), R), R), addmod(addmod(addmod(mulmod(lagrange_56, input[56], R), mulmod(lagrange_57, input[57], R), R), addmod(mulmod(lagrange_58, input[58], R), mulmod(lagrange_59, input[59], R), R), R), addmod(addmod(mulmod(lagrange_60, input[60], R), mulmod(lagrange_61, input[61], R), R), addmod(mulmod(lagrange_62, input[62], R), mulmod(lagrange_63, input[63], R), R), R), R), R), R), R), addmod(addmod(addmod(addmod(addmod(addmod(mulmod(lagrange_64, input[64], R), mulmod(lagrange_65, input[65], R), R), addmod(mulmod(lagrange_66, input[66], R), mulmod(lagrange_67, input[67], R), R), R), addmod(addmod(mulmod(lagrange_68, input[68], R), mulmod(lagrange_69, input[69], R), R), addmod(mulmod(lagrange_70, input[70], R), mulmod(lagrange_71, input[71], R), R), R), R), addmod(addmod(addmod(mulmod(lagrange_72, input[72], R), mulmod(lagrange_73, input[73], R), R), addmod(mulmod(lagrange_74, input[74], R), mulmod(lagrange_75, input[75], R), R), R), addmod(addmod(mulmod(lagrange_76, input[76], R), mulmod(lagrange_77, input[77], R), R), addmod(mulmod(lagrange_78, input[78], R), mulmod(lagrange_79, input[79], R), R), R), R), R), addmod(addmod(addmod(addmod(mulmod(lagrange_80, input[80], R), mulmod(lagrange_81, input[81], R), R), addmod(mulmod(lagrange_82, input[82], R), mulmod(lagrange_83, input[83], R), R), R), addmod(addmod(mulmod(lagrange_84, input[84], R), mulmod(lagrange_85, input[85], R), R), addmod(mulmod(lagrange_86, input[86], R), mulmod(lagrange_87, input[87], R), R), R), R), addmod(addmod(addmod(mulmod(lagrange_88, input[88], R), mulmod(lagrange_89, input[89], R), R), addmod(mulmod(lagrange_90, input[90], R), mulmod(lagrange_91, input[91], R), R), R), addmod(addmod(mulmod(lagrange_92, input[92], R), mulmod(lagrange_93, input[93], R), R), addmod(mulmod(lagrange_94, input[94], R), mulmod(lagrange_95, input[95], R), R), R), R), R), R), addmod(addmod(addmod(addmod(addmod(mulmod(lagrange_96, input[96], R), mulmod(lagrange_97, input[97], R), R), addmod(mulmod(lagrange_98, input[98], R), mulmod(lagrange_99, input[99], R), R), R), addmod(addmod(mulmod(lagrange_100, input[100], R), mulmod(lagrange_101, input[101], R), R), addmod(mulmod(lagrange_102, input[102], R), mulmod(lagrange_103, input[103], R), R), R), R), addmod(addmod(addmod(mulmod(lagrange_104, input[104], R), mulmod(lagrange_105, input[105], R), R), addmod(mulmod(lagrange_106, input[106], R), mulmod(lagrange_107, input[107], R), R), R), addmod(addmod(mulmod(lagrange_108, input[108], R), mulmod(lagrange_109, input[109], R), R), addmod(mulmod(lagrange_110, input[110], R), mulmod(lagrange_111, input[111], R), R), R), R), R), addmod(addmod(addmod(addmod(mulmod(lagrange_112, input[112], R), mulmod(lagrange_113, input[113], R), R), addmod(mulmod(lagrange_114, input[114], R), mulmod(lagrange_115, input[115], R), R), R), addmod(addmod(mulmod(lagrange_116, input[116], R), mulmod(lagrange_117, input[117], R), R), addmod(mulmod(lagrange_118, input[118], R), mulmod(lagrange_119, input[119], R), R), R), R), addmod(addmod(addmod(mulmod(lagrange_120, input[120], R), mulmod(lagrange_121, input[121], R), R), addmod(mulmod(lagrange_122, input[122], R), mulmod(lagrange_123, input[123], R), R), R), addmod(addmod(mulmod(lagrange_124, input[124], R), mulmod(lagrange_125, input[125], R), R), addmod(mulmod(lagrange_126, input[126], R), mulmod(lagrange_127, input[127], R), R), R), R), R), R), R), R);

        // Compute vanishing polynomial
        uint256 vanishing_poly = compute_vanishing_poly(chall);

        // Compute numerator: (((proof[0] + x_a)^2) - proof[1]) mod P
        uint256 numerator = addmod(proof[0], x_a, R);
        numerator = mulmod(numerator, numerator, R);
        numerator = addmod(numerator, R - proof[1], R);

        // Compute modular inverse of vanishing_poly
        uint256 vanishing_poly_inv = invert_FR(vanishing_poly);
        // Compute v_q = numerator * vanishing_poly_inv mod P
        v_q = mulmod(numerator, vanishing_poly_inv, R);
    }

    // Computes A = α_g * v_a + β_g * v_b + g * v_q - u_g * challenge
    // This is used in pairing check
    function compute_A(
        uint256 v_a,
        uint256 v_b,
        uint256 v_q,
        uint256 chall,
        uint256 u_g_x,
        uint256 u_g_y
    ) internal view returns (uint256 A_x, uint256 A_y) {
        bool success;
        uint256[2] memory P1;
        uint256[2] memory P2;
        uint256[2] memory P3;
        uint256[2] memory P4;
        uint256[2] memory P5;

        // Compute P1 = α_g * v_a (scalar multiplication)
        assembly ("memory-safe") {
            let ptr := mload(0x40)
            mstore(ptr, ALPHA_G_X)
            mstore(add(ptr, 0x20), ALPHA_G_Y)
            mstore(add(ptr, 0x40), v_a)

            success := staticcall(gas(), PRECOMPILE_MUL, ptr, 0x60, P1, 0x40)
        }

        // Compute P2 = β_g * v_b (scalar multiplication)
        assembly ("memory-safe") {
            let ptr := mload(0x40)
            mstore(ptr, BETA_G_X)
            mstore(add(ptr, 0x20), BETA_G_Y)
            mstore(add(ptr, 0x40), v_b)

            success := staticcall(gas(), PRECOMPILE_MUL, ptr, 0x60, P2, 0x40)
        }

        // Compute P3 = g * v_q (assuming g = (1, 2))
        assembly ("memory-safe") {
            let ptr := mload(0x40)
            mstore(ptr, G_X)
            mstore(add(ptr, 0x20), G_Y)
            mstore(add(ptr, 0x40), v_q)

            success := staticcall(gas(), PRECOMPILE_MUL, ptr, 0x60, P3, 0x40)
        }

        // Compute P4 = u_g * challenge (scalar multiplication)
        assembly ("memory-safe") {
            let ptr := mload(0x40)
            mstore(ptr, u_g_x)
            mstore(add(ptr, 0x20), u_g_y)
            mstore(add(ptr, 0x40), chall)

            success := staticcall(gas(), PRECOMPILE_MUL, ptr, 0x60, P4, 0x40)
        }

        // Compute A = P1 + P2 + P3 - P4 (point addition using ecAdd)
        uint256[2] memory temp;

        // Step 1: temp = P1 + P2
        assembly ("memory-safe") {
            let ptr := mload(0x40)
            mstore(ptr, mload(P1))
            mstore(add(ptr, 0x20), mload(add(P1, 0x20)))
            mstore(add(ptr, 0x40), mload(P2))
            mstore(add(ptr, 0x60), mload(add(P2, 0x20)))

            success := staticcall(gas(), PRECOMPILE_ADD, ptr, 0x80, temp, 0x40)
        }

        require(success, "EC ADD failed for P1 + P2");

        // Step 2: temp = temp + P3
        assembly ("memory-safe") {
            let ptr := mload(0x40)
            mstore(ptr, mload(temp))
            mstore(add(ptr, 0x20), mload(add(temp, 0x20)))
            mstore(add(ptr, 0x40), mload(P3))
            mstore(add(ptr, 0x60), mload(add(P3, 0x20)))

            success := staticcall(gas(), PRECOMPILE_ADD, ptr, 0x80, temp, 0x40)
        }

        require(success, "EC ADD failed for (P1 + P2) + P3");

        // Step 3: A = temp - P4 (Point subtraction: A = temp + (-P4))
        // In elliptic curves, subtraction is adding the negated Y-coordinate.
        assembly ("memory-safe") {
            let ptr := mload(0x40)
            mstore(ptr, mload(temp))
            mstore(add(ptr, 0x20), mload(add(temp, 0x20)))
            mstore(add(ptr, 0x40), mload(P4))
            mstore(add(ptr, 0x60), sub(P, mload(add(P4, 0x20)))) // Negate P4_Y (mod P)

            success := staticcall(gas(), PRECOMPILE_ADD, ptr, 0x80, P5, 0x40)
        }

        A_x = P5[0];
        A_y = P5[1];
    }

    // Compute the RO challenge, this is done by hashing all the available public data up to the evaluation step of the verification process
    // This public data includes T_g (Which is the batch commitment and is a part of the proof, i.e. Proof[2:3]), the public input, and the verification key
    // Dues to stack limitation, the input to Keccak256 is split into two parts
    function comp_chall(
        uint256[2] memory t_g,
        uint256[128] memory input
    ) public pure returns (uint256) {
        bytes32 hash = keccak256(
            abi.encodePacked(
                t_g[0],
                t_g[1],
                input[0],
input[1],
input[2],
input[3],
input[4],
input[5],
input[6],
input[7],
input[8],
input[9],
input[10],
input[11],
input[12],
input[13],
input[14],
input[15],
input[16],
input[17],
input[18],
input[19],
input[20],
input[21],
input[22],
input[23],
input[24],
input[25],
input[26],
input[27],
input[28],
input[29],
input[30],
input[31],
input[32],
input[33],
input[34],
input[35],
input[36],
input[37],
input[38],
input[39],
input[40],
input[41],
input[42],
input[43],
input[44],
input[45],
input[46],
input[47],
input[48],
input[49],
input[50],
input[51],
input[52],
input[53],
input[54],
input[55],
input[56],
input[57],
input[58],
input[59],
input[60],
input[61],
input[62],
input[63],
input[64],
input[65],
input[66],
input[67],
input[68],
input[69],
input[70],
input[71],
input[72],
input[73],
input[74],
input[75],
input[76],
input[77],
input[78],
input[79],
input[80],
input[81],
input[82],
input[83],
input[84],
input[85],
input[86],
input[87],
input[88],
input[89],
input[90],
input[91],
input[92],
input[93],
input[94],
input[95],
input[96],
input[97],
input[98],
input[99],
input[100],
input[101],
input[102],
input[103],
input[104],
input[105],
input[106],
input[107],
input[108],
input[109],
input[110],
input[111],
input[112],
input[113],
input[114],
input[115],
input[116],
input[117],
input[118],
input[119],
input[120],
input[121],
input[122],
input[123],
input[124],
input[125],
input[126],
input[127],

                G_X,
                G_Y,
                ALPHA_G_X,
                ALPHA_G_Y,
                BETA_G_X,
                BETA_G_Y,
                H_X_0,
                H_X_1,
                H_Y_0,
                H_Y_1,
                DELTA_TWO_H_X_0,
                DELTA_TWO_H_X_1,
                DELTA_TWO_H_Y_0,
                DELTA_TWO_H_Y_1,
                TAU_H_X_0,
                TAU_H_X_1,
                TAU_H_Y_0,
                TAU_H_Y_1
            )
        );


        // Compute challenge
        uint256 chall = uint256(hash) % R;

        return chall;
    }

    ///////////////////////// The main verification function of Pari ///////////////////////////

    // The verifier for `Circuit1` in `pari/test/Circuit1`
    function Verify(
        uint256[6] calldata proof,
        uint256[128] calldata input
    ) public view {
        uint256 chall = comp_chall([proof[2], proof[3]], input);
        (uint256 A_x, uint256 A_y) = compute_A(
            proof[0],
            proof[1],
            comp_vq(input, proof, chall),
            chall,
            proof[4],
            proof[5]
        );

        //////////////////// Pairing  ////////////////////

        bool success;
        uint256 t_g_x = proof[2]; // Fix: Load calldata into memory first
        uint256 t_g_y = proof[3];
        uint256 u_g_x = proof[4]; // Fix: Load calldata into memory first
        uint256 u_g_y = proof[5];

        assembly ("memory-safe") {
            let memPtr := mload(0x40) // Load free memory pointer

            mstore(add(memPtr, 0x00), t_g_x)
            mstore(add(memPtr, 0x20), t_g_y)
            mstore(add(memPtr, 0x40), DELTA_TWO_H_X_1)
            mstore(add(memPtr, 0x60), DELTA_TWO_H_X_0)
            mstore(add(memPtr, 0x80), DELTA_TWO_H_Y_1)
            mstore(add(memPtr, 0xa0), DELTA_TWO_H_Y_0)

            mstore(add(memPtr, 0xc0), u_g_x)
            mstore(add(memPtr, 0xe0), u_g_y)
            mstore(add(memPtr, 0x100), TAU_H_X_1)
            mstore(add(memPtr, 0x120), TAU_H_X_0)
            mstore(add(memPtr, 0x140), TAU_H_Y_1)
            mstore(add(memPtr, 0x160), TAU_H_Y_0)

            mstore(add(memPtr, 0x180), A_x)
            mstore(add(memPtr, 0x1a0), A_y)
            mstore(add(memPtr, 0x1c0), H_X_1)
            mstore(add(memPtr, 0x1e0), H_X_0)
            mstore(add(memPtr, 0x200), H_Y_1)
            mstore(add(memPtr, 0x220), H_Y_0)

            // Call the BN254 pairing precompile (0x08)
            success := staticcall(
                gas(), // Gas available
                PRECOMPILE_VERIFY, // Precompile address for pairing
                memPtr, // Input memory location
                0x240, // Input size (576 bytes for 3 pairings)
                memPtr, // Store output in the same memory
                0x20 // Output size (32 bytes)
            )
            success := and(success, mload(memPtr))
        }
        if (!success) {
            // Either proof or verification key invalid.
            // We assume the contract is correctly generated, so the verification key is valid.
            revert ProofInvalid();
        }
    }
}

    